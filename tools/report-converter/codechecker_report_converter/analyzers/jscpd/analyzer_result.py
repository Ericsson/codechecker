import json
import logging
import os

from typing import Dict, List

from codechecker_report_converter.report import File, get_or_create_file, \
    Report

from ..analyzer_result import AnalyzerResultBase


LOG = logging.getLogger('report-converter')


class AnalyzerResult(AnalyzerResultBase):
    """ Transform analyzer result of the jscpd analyzer. """

    TOOL_NAME = 'jscpd'
    NAME = 'JSCPD'
    URL = 'https://github.com/kucherenko/jscpd'

    def get_reports(self, result_file_path: str) -> List[Report]:
        """ Get reports from the given analyzer result. """
        reports: List[Report] = []

        if not os.path.exists(result_file_path):
            LOG.error("Report file does not exist: %s", result_file_path)
            return reports

        try:
            with open(result_file_path, 'r',
                      encoding="utf-8", errors="ignore") as f:
                data = json.load(f)
        except (IOError, json.decoder.JSONDecodeError):
            LOG.error("Failed to parse the given analyzer result '%s'. Please "
                      "give a valid json file generated by jscpd.",
                      result_file_path)
            return reports

        file_cache: Dict[str, File] = {}
        for duplication in data['duplicates']:
            for file_key in ['firstFile', 'secondFile']:
                duplication_file = duplication[file_key]
                file_path = os.path.join(
                    os.path.dirname(result_file_path),
                    duplication_file['name'])
                if not os.path.exists(file_path):
                    LOG.warning("Source file does not exists: %s", file_path)
                    continue

                reports.append(Report(
                    get_or_create_file(os.path.abspath(file_path), file_cache),
                    int(duplication_file['startLoc']['line']),
                    int(duplication_file['startLoc']['column']),
                    f"Duplicated code of {duplication['lines']} lines",
                    duplication_file['name']))

        return reports
